<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/archives/4a17b156.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener external nofollow noreferrer">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener external nofollow noreferrer">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener external nofollow noreferrer">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener external nofollow noreferrer">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener external nofollow noreferrer">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener external nofollow noreferrer">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener external nofollow noreferrer">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener external nofollow noreferrer">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>百度深度学习第一天：手势识别</title>
    <url>/archives/fe1fa42d.html</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> paddle</span><br><span class="line"><span class="keyword">import</span> paddle.fluid <span class="keyword">as</span> fluid</span><br><span class="line"><span class="keyword">import</span> paddle.fluid.layers <span class="keyword">as</span> layers</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> cpu_count</span><br><span class="line"><span class="keyword">from</span> paddle.fluid.dygraph <span class="keyword">import</span> Pool2D,Conv2D</span><br><span class="line"><span class="keyword">from</span> paddle.fluid.dygraph <span class="keyword">import</span> Linear</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成图像列表</span></span><br><span class="line">data_path = <span class="string">'Dataset'</span></span><br><span class="line">character_folders = os.listdir(data_path)</span><br><span class="line"><span class="comment"># print(character_folders)</span></span><br><span class="line"><span class="keyword">if</span>(os.path.exists(<span class="string">'./train_data.list'</span>)):</span><br><span class="line">    os.remove(<span class="string">'./train_data.list'</span>)</span><br><span class="line"><span class="keyword">if</span>(os.path.exists(<span class="string">'./test_data.list'</span>)):</span><br><span class="line">    os.remove(<span class="string">'./test_data.list'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> character_folder <span class="keyword">in</span> character_folders:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'./train_data.list'</span>, <span class="string">'a'</span>) <span class="keyword">as</span> f_train:</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'./test_data.list'</span>, <span class="string">'a'</span>) <span class="keyword">as</span> f_test:</span><br><span class="line">            <span class="keyword">if</span> character_folder == <span class="string">'.DS_Store'</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            character_imgs = os.listdir(os.path.join(data_path,character_folder))</span><br><span class="line">            count = <span class="number">0</span> </span><br><span class="line">            <span class="keyword">for</span> img <span class="keyword">in</span> character_imgs:</span><br><span class="line">                <span class="keyword">if</span> img ==<span class="string">'.DS_Store'</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> count%<span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">                    f_test.write(os.path.join(data_path,character_folder,img) + <span class="string">'\t'</span> + character_folder + <span class="string">'\n'</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    f_train.write(os.path.join(data_path,character_folder,img) + <span class="string">'\t'</span> + character_folder + <span class="string">'\n'</span>)</span><br><span class="line">                count +=<span class="number">1</span></span><br><span class="line">print(<span class="string">'列表已生成'</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">列表已生成</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义训练集和测试集的reader</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_mapper</span><span class="params">(sample)</span>:</span></span><br><span class="line">    img, label = sample</span><br><span class="line">    img = Image.open(img)</span><br><span class="line">    img = img.resize((<span class="number">100</span>, <span class="number">100</span>), Image.ANTIALIAS)</span><br><span class="line">    img = np.array(img).astype(<span class="string">'float32'</span>)</span><br><span class="line">    img = img.transpose((<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">    img = img/<span class="number">255.0</span></span><br><span class="line">    <span class="keyword">return</span> img, label</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_reader</span><span class="params">(data_list_path)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reader</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">with</span> open(data_list_path, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            lines = f.readlines()</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">                img, label = line.split(<span class="string">'\t'</span>)</span><br><span class="line">                <span class="keyword">yield</span> img, int(label)</span><br><span class="line">    <span class="keyword">return</span> paddle.reader.xmap_readers(data_mapper, reader, cpu_count(), <span class="number">512</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用于训练的数据提供器</span></span><br><span class="line">train_reader = paddle.batch(reader=paddle.reader.shuffle(reader=data_reader(<span class="string">'./train_data.list'</span>), buf_size=<span class="number">2500</span>), batch_size=<span class="number">32</span>)<span class="comment">#buf_size=256</span></span><br><span class="line"><span class="comment"># 用于测试的数据提供器</span></span><br><span class="line">test_reader = paddle.batch(reader=data_reader(<span class="string">'./test_data.list'</span>), batch_size=<span class="number">32</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义DNN网络</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDNN</span><span class="params">(fluid.dygraph.Layer)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(MyDNN,self).__init__()</span><br><span class="line">        self.hidden1 = Linear(<span class="number">100</span>,<span class="number">512</span>,act=<span class="string">'relu'</span>)</span><br><span class="line">        self.hidden2 = Linear(<span class="number">512</span>,<span class="number">1024</span>,act=<span class="string">'relu'</span>)</span><br><span class="line">        self.hidden3 = Linear(<span class="number">1024</span>,<span class="number">512</span>,act=<span class="string">'relu'</span>)</span><br><span class="line">        self.hidden4 = Linear(<span class="number">512</span>,<span class="number">100</span>,act=<span class="string">'relu'</span>)</span><br><span class="line">        self.hidden5 = Linear(<span class="number">3</span>*<span class="number">100</span>*<span class="number">100</span>,<span class="number">10</span>,act=<span class="string">'softmax'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self,input)</span>:</span></span><br><span class="line">        x_ = self.hidden1(input)</span><br><span class="line">        x_ = self.hidden2(x_)</span><br><span class="line">        x_ = self.hidden3(x_)</span><br><span class="line">        x_ = self.hidden4(x_)</span><br><span class="line">        x_ = fluid.layers.reshape(x_,shape=[<span class="number">-1</span>,<span class="number">3</span>*<span class="number">100</span>*<span class="number">100</span>])</span><br><span class="line">        y = self.hidden5(x_)</span><br><span class="line">        <span class="keyword">return</span> y</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用动态图进行训练</span></span><br><span class="line"><span class="keyword">with</span> fluid.dygraph.guard():</span><br><span class="line">    model=MyDNN() <span class="comment">#模型实例化</span></span><br><span class="line">    model.train() <span class="comment">#训练模式</span></span><br><span class="line">    <span class="comment">#opt=fluid.optimizer.SGDOptimizer(learning_rate=0.005, parameter_list=model.parameters())#优化器选用SGD随机梯度下降，学习率为0.001. 原本为0.01</span></span><br><span class="line">    moment_optimizer = fluid.optimizer.MomentumOptimizer(learning_rate=<span class="number">0.001</span>, momentum=<span class="number">0.9</span>,parameter_list=model.parameters())</span><br><span class="line">    </span><br><span class="line">    epochs_num=<span class="number">40</span> <span class="comment">#迭代次数</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> pass_num <span class="keyword">in</span> range(epochs_num):</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> batch_id,data <span class="keyword">in</span> enumerate(train_reader()):</span><br><span class="line">            </span><br><span class="line">            images=np.array([x[<span class="number">0</span>].reshape(<span class="number">3</span>,<span class="number">100</span>,<span class="number">100</span>) <span class="keyword">for</span> x <span class="keyword">in</span> data],np.float32)</span><br><span class="line">            </span><br><span class="line">            labels = np.array([x[<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> data]).astype(<span class="string">'int64'</span>)</span><br><span class="line">            labels = labels[:, np.newaxis]</span><br><span class="line">            <span class="comment"># print(images.shape)</span></span><br><span class="line">            image=fluid.dygraph.to_variable(images)</span><br><span class="line">            label=fluid.dygraph.to_variable(labels)</span><br><span class="line">            predict=model(image)<span class="comment">#预测</span></span><br><span class="line">            <span class="comment"># print(predict)</span></span><br><span class="line">            loss=fluid.layers.cross_entropy(predict,label)</span><br><span class="line">            avg_loss=fluid.layers.mean(loss)<span class="comment">#获取loss值</span></span><br><span class="line">            </span><br><span class="line">            acc=fluid.layers.accuracy(predict,label)<span class="comment">#计算精度</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> batch_id!=<span class="number">0</span> <span class="keyword">and</span> batch_id%<span class="number">50</span>==<span class="number">0</span>:</span><br><span class="line">                print(<span class="string">"train_pass:&#123;&#125;,batch_id:&#123;&#125;,train_loss:&#123;&#125;,train_acc:&#123;&#125;"</span>.format(pass_num,batch_id,avg_loss.numpy(),acc.numpy()))</span><br><span class="line">            </span><br><span class="line">            avg_loss.backward()</span><br><span class="line">            <span class="comment">#opt.minimize(avg_loss)</span></span><br><span class="line">            moment_optimizer.minimize(avg_loss)</span><br><span class="line">            model.clear_gradients()</span><br><span class="line">            </span><br><span class="line">    fluid.save_dygraph(model.state_dict(),<span class="string">'MyDNN'</span>)<span class="comment">#保存模型</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">train_pass:0,batch_id:50,train_loss:[2.294481],train_acc:[0.09375]</span><br><span class="line">train_pass:1,batch_id:50,train_loss:[2.0645308],train_acc:[0.375]</span><br><span class="line">train_pass:2,batch_id:50,train_loss:[1.5960568],train_acc:[0.46875]</span><br><span class="line">train_pass:3,batch_id:50,train_loss:[1.3719133],train_acc:[0.5]</span><br><span class="line">train_pass:4,batch_id:50,train_loss:[0.93623775],train_acc:[0.71875]</span><br><span class="line">train_pass:5,batch_id:50,train_loss:[1.2308426],train_acc:[0.53125]</span><br><span class="line">train_pass:6,batch_id:50,train_loss:[0.93580544],train_acc:[0.8125]</span><br><span class="line">train_pass:7,batch_id:50,train_loss:[0.6112361],train_acc:[0.8125]</span><br><span class="line">train_pass:8,batch_id:50,train_loss:[0.56111217],train_acc:[0.84375]</span><br><span class="line">train_pass:9,batch_id:50,train_loss:[0.35266584],train_acc:[0.875]</span><br><span class="line">train_pass:10,batch_id:50,train_loss:[0.663376],train_acc:[0.84375]</span><br><span class="line">train_pass:11,batch_id:50,train_loss:[0.39982957],train_acc:[0.875]</span><br><span class="line">train_pass:12,batch_id:50,train_loss:[0.48466143],train_acc:[0.90625]</span><br><span class="line">train_pass:13,batch_id:50,train_loss:[0.44530296],train_acc:[0.875]</span><br><span class="line">train_pass:14,batch_id:50,train_loss:[0.36769903],train_acc:[0.875]</span><br><span class="line">train_pass:15,batch_id:50,train_loss:[0.42304033],train_acc:[0.875]</span><br><span class="line">train_pass:16,batch_id:50,train_loss:[1.0570693],train_acc:[0.75]</span><br><span class="line">train_pass:17,batch_id:50,train_loss:[0.34841073],train_acc:[0.875]</span><br><span class="line">train_pass:18,batch_id:50,train_loss:[0.4719584],train_acc:[0.875]</span><br><span class="line">train_pass:19,batch_id:50,train_loss:[0.3141079],train_acc:[0.90625]</span><br><span class="line">train_pass:20,batch_id:50,train_loss:[0.41665214],train_acc:[0.875]</span><br><span class="line">train_pass:21,batch_id:50,train_loss:[0.16500624],train_acc:[1.]</span><br><span class="line">train_pass:22,batch_id:50,train_loss:[0.24480346],train_acc:[0.96875]</span><br><span class="line">train_pass:23,batch_id:50,train_loss:[0.1888493],train_acc:[0.90625]</span><br><span class="line">train_pass:24,batch_id:50,train_loss:[0.35546368],train_acc:[0.9375]</span><br><span class="line">train_pass:25,batch_id:50,train_loss:[0.25515983],train_acc:[0.96875]</span><br><span class="line">train_pass:26,batch_id:50,train_loss:[0.41346908],train_acc:[0.84375]</span><br><span class="line">train_pass:27,batch_id:50,train_loss:[0.31586522],train_acc:[0.875]</span><br><span class="line">train_pass:28,batch_id:50,train_loss:[0.10244638],train_acc:[0.96875]</span><br><span class="line">train_pass:29,batch_id:50,train_loss:[0.2374803],train_acc:[0.96875]</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#模型校验</span></span><br><span class="line"><span class="keyword">with</span> fluid.dygraph.guard():</span><br><span class="line">    accs = []</span><br><span class="line">    model_dict, _ = fluid.load_dygraph(<span class="string">'MyDNN'</span>)</span><br><span class="line">    model = MyDNN()</span><br><span class="line">    model.load_dict(model_dict) <span class="comment">#加载模型参数</span></span><br><span class="line">    model.eval() <span class="comment">#训练模式</span></span><br><span class="line">    <span class="keyword">for</span> batch_id,data <span class="keyword">in</span> enumerate(test_reader()):<span class="comment">#测试集</span></span><br><span class="line">        images=np.array([x[<span class="number">0</span>].reshape(<span class="number">3</span>,<span class="number">100</span>,<span class="number">100</span>) <span class="keyword">for</span> x <span class="keyword">in</span> data],np.float32)</span><br><span class="line">        labels = np.array([x[<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> data]).astype(<span class="string">'int64'</span>)</span><br><span class="line">        labels = labels[:, np.newaxis]</span><br><span class="line"></span><br><span class="line">        image=fluid.dygraph.to_variable(images)</span><br><span class="line">        label=fluid.dygraph.to_variable(labels)</span><br><span class="line">        </span><br><span class="line">        predict=model(image)       </span><br><span class="line">        acc=fluid.layers.accuracy(predict,label)</span><br><span class="line">        accs.append(acc.numpy()[<span class="number">0</span>])</span><br><span class="line">        avg_acc = np.mean(accs)</span><br><span class="line">    print(avg_acc)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0.7906746</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#读取预测图像，进行预测</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_image</span><span class="params">(path)</span>:</span></span><br><span class="line">    img = Image.open(path)</span><br><span class="line">    img = img.resize((<span class="number">100</span>, <span class="number">100</span>), Image.ANTIALIAS)</span><br><span class="line">    img = np.array(img).astype(<span class="string">'float32'</span>)</span><br><span class="line">    img = img.transpose((<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">    img = img/<span class="number">255.0</span></span><br><span class="line">    print(img.shape)</span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"><span class="comment">#构建预测动态图过程</span></span><br><span class="line"><span class="keyword">with</span> fluid.dygraph.guard():</span><br><span class="line">    infer_path = <span class="string">'手势.JPG'</span></span><br><span class="line">    model=MyDNN()<span class="comment">#模型实例化</span></span><br><span class="line">    model_dict,_=fluid.load_dygraph(<span class="string">'MyDNN'</span>)</span><br><span class="line">    model.load_dict(model_dict)<span class="comment">#加载模型参数</span></span><br><span class="line">    model.eval()<span class="comment">#评估模式</span></span><br><span class="line">    infer_img = load_image(infer_path)</span><br><span class="line">    infer_img=np.array(infer_img).astype(<span class="string">'float32'</span>)</span><br><span class="line">    infer_img=infer_img[np.newaxis,:, : ,:]</span><br><span class="line">    infer_img = fluid.dygraph.to_variable(infer_img)</span><br><span class="line">    result=model(infer_img)</span><br><span class="line">    display(Image.open(<span class="string">'手势.JPG'</span>))</span><br><span class="line">    print(np.argmax(result.numpy()))</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(3, 100, 100)</span><br></pre></td></tr></table></figure>



<p><img src="C:/Users/49084/AppData/Local/Temp/Rar$DIa15644.31061/output_7_1.png" alt="png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义CNN网络</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCNN</span><span class="params">(fluid.dygraph.Layer)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(MyCNN,self).__init__()</span><br><span class="line">        self.hidden1 = Conv2D(<span class="number">3</span>,<span class="number">64</span>,<span class="number">3</span>,padding=<span class="number">1</span>,act=<span class="string">'relu'</span>)</span><br><span class="line">        self.hidden2 = Conv2D(<span class="number">64</span>,<span class="number">128</span>,<span class="number">3</span>,padding=<span class="number">1</span>,act=<span class="string">'relu'</span>)</span><br><span class="line">        self.hidden3 = Conv2D(<span class="number">128</span>,<span class="number">256</span>,<span class="number">3</span>,stride=<span class="number">1</span>,padding=<span class="number">1</span>,act=<span class="string">'relu'</span>)</span><br><span class="line">        self.hidden4 = Conv2D(<span class="number">256</span>,<span class="number">512</span>,<span class="number">3</span>,stride=<span class="number">1</span>,padding=<span class="number">1</span>,act=<span class="string">'relu'</span>)</span><br><span class="line">        self.hidden5 = Conv2D(<span class="number">512</span>,<span class="number">1024</span>,<span class="number">3</span>,stride=<span class="number">1</span>,padding=<span class="number">1</span>,act=<span class="string">'relu'</span>)</span><br><span class="line">        self.hidden6 = Conv2D(<span class="number">1024</span>,<span class="number">512</span>,<span class="number">3</span>,stride=<span class="number">1</span>,padding=<span class="number">1</span>,act=<span class="string">'relu'</span>)</span><br><span class="line">        self.hidden7 = Conv2D(<span class="number">512</span>,<span class="number">256</span>,<span class="number">3</span>,stride=<span class="number">1</span>,padding=<span class="number">1</span>,act=<span class="string">'relu'</span>)</span><br><span class="line">        self.hidden8 = Linear(<span class="number">256</span>*<span class="number">13</span>*<span class="number">13</span>,<span class="number">2048</span>,act=<span class="string">'relu'</span>)</span><br><span class="line">        self.hidden9 = Linear(<span class="number">2048</span>,<span class="number">1024</span>,act=<span class="string">'relu'</span>)</span><br><span class="line">        self.hidden10 = Linear(<span class="number">1024</span>,<span class="number">10</span>,act=<span class="string">'softmax'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self,input)</span>:</span></span><br><span class="line">        x_ = self.hidden1(input)</span><br><span class="line">        x_ = self.hidden2(x_)</span><br><span class="line">        x_ = self.hidden3(x_)</span><br><span class="line">        x_ = self.hidden4(x_)</span><br><span class="line">        x_ = self.hidden5(x_)</span><br><span class="line">        x_ = self.hidden6(x_)</span><br><span class="line">        x_ = self.hidden7(x_)</span><br><span class="line">        x_ = fluid.layers.reshape(x_,shape=[<span class="number">-1</span>,<span class="number">256</span>*<span class="number">13</span>*<span class="number">13</span>])</span><br><span class="line">        x_ = self.hidden8(x_)</span><br><span class="line">        x_ = self.hidden9(x_)</span><br><span class="line">        y = self.hidden10(x_)</span><br><span class="line">        <span class="keyword">return</span> y</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用动态图进行训练</span></span><br><span class="line"><span class="keyword">with</span> fluid.dygraph.guard():</span><br><span class="line">    model=MyCNN() <span class="comment">#模型实例化</span></span><br><span class="line">    model.train() <span class="comment">#训练模式</span></span><br><span class="line">    opt=fluid.optimizer.SGDOptimizer(learning_rate=<span class="number">0.01</span>, parameter_list=model.parameters())<span class="comment">#优化器选用SGD随机梯度下降，学习率为0.001. 原本为0.01</span></span><br><span class="line"></span><br><span class="line">    epochs_num=<span class="number">20</span> <span class="comment">#迭代次数</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> pass_num <span class="keyword">in</span> range(epochs_num):</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> batch_id,data <span class="keyword">in</span> enumerate(train_reader()):</span><br><span class="line">            </span><br><span class="line">            images=np.array([x[<span class="number">0</span>].reshape(<span class="number">3</span>,<span class="number">100</span>,<span class="number">100</span>) <span class="keyword">for</span> x <span class="keyword">in</span> data],np.float32)</span><br><span class="line">            </span><br><span class="line">            labels = np.array([x[<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> data]).astype(<span class="string">'int64'</span>)</span><br><span class="line">            labels = labels[:, np.newaxis]</span><br><span class="line">            <span class="comment"># print(images.shape)</span></span><br><span class="line">            image=fluid.dygraph.to_variable(images)</span><br><span class="line">            label=fluid.dygraph.to_variable(labels)</span><br><span class="line">            predict=model(image)<span class="comment">#预测</span></span><br><span class="line">            <span class="comment"># print(predict)</span></span><br><span class="line">            loss=fluid.layers.cross_entropy(predict,label)</span><br><span class="line">            avg_loss=fluid.layers.mean(loss)<span class="comment">#获取loss值</span></span><br><span class="line">            </span><br><span class="line">            acc=fluid.layers.accuracy(predict,label)<span class="comment">#计算精度</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> batch_id!=<span class="number">0</span> <span class="keyword">and</span> batch_id%<span class="number">50</span>==<span class="number">0</span>:</span><br><span class="line">                print(<span class="string">"train_pass:&#123;&#125;,batch_id:&#123;&#125;,train_loss:&#123;&#125;,train_acc:&#123;&#125;"</span>.format(pass_num,batch_id,avg_loss.numpy(),acc.numpy()))</span><br><span class="line">            </span><br><span class="line">            avg_loss.backward()</span><br><span class="line">            opt.minimize(avg_loss)</span><br><span class="line">            model.clear_gradients()</span><br><span class="line">            </span><br><span class="line">    fluid.save_dygraph(model.state_dict(),<span class="string">'MyCNN'</span>)<span class="comment">#保存模型</span></span><br></pre></td></tr></table></figure>





<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#模型校验</span></span><br><span class="line"><span class="keyword">with</span> fluid.dygraph.guard():</span><br><span class="line">    accs = []</span><br><span class="line">    model_dict, _ = fluid.load_dygraph(<span class="string">'MyDNN'</span>)</span><br><span class="line">    model = MyCNN()</span><br><span class="line">    model.load_dict(model_dict) <span class="comment">#加载模型参数</span></span><br><span class="line">    model.eval() <span class="comment">#训练模式</span></span><br><span class="line">    <span class="keyword">for</span> batch_id,data <span class="keyword">in</span> enumerate(test_reader()):<span class="comment">#测试集</span></span><br><span class="line">        images=np.array([x[<span class="number">0</span>].reshape(<span class="number">3</span>,<span class="number">100</span>,<span class="number">100</span>) <span class="keyword">for</span> x <span class="keyword">in</span> data],np.float32)</span><br><span class="line">        labels = np.array([x[<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> data]).astype(<span class="string">'int64'</span>)</span><br><span class="line">        labels = labels[:, np.newaxis]</span><br><span class="line"></span><br><span class="line">        image=fluid.dygraph.to_variable(images)</span><br><span class="line">        label=fluid.dygraph.to_variable(labels)</span><br><span class="line">        </span><br><span class="line">        predict=model(image)       </span><br><span class="line">        acc=fluid.layers.accuracy(predict,label)</span><br><span class="line">        accs.append(acc.numpy()[<span class="number">0</span>])</span><br><span class="line">        avg_acc = np.mean(accs)</span><br><span class="line">    print(avg_acc)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#读取预测图像，进行预测</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_image</span><span class="params">(path)</span>:</span></span><br><span class="line">    img = Image.open(path)</span><br><span class="line">    img = img.resize((<span class="number">100</span>, <span class="number">100</span>), Image.ANTIALIAS)</span><br><span class="line">    img = np.array(img).astype(<span class="string">'float32'</span>)</span><br><span class="line">    img = img.transpose((<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">    img = img/<span class="number">255.0</span></span><br><span class="line">    print(img.shape)</span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"><span class="comment">#构建预测动态图过程</span></span><br><span class="line"><span class="keyword">with</span> fluid.dygraph.guard():</span><br><span class="line">    infer_path = <span class="string">'手势.JPG'</span></span><br><span class="line">    model=MyCNN()<span class="comment">#模型实例化</span></span><br><span class="line">    model_dict,_=fluid.load_dygraph(<span class="string">'MyDNN'</span>)</span><br><span class="line">    model.load_dict(model_dict)<span class="comment">#加载模型参数</span></span><br><span class="line">    model.eval()<span class="comment">#评估模式</span></span><br><span class="line">    infer_img = load_image(infer_path)</span><br><span class="line">    infer_img=np.array(infer_img).astype(<span class="string">'float32'</span>)</span><br><span class="line">    infer_img=infer_img[np.newaxis,:, : ,:]</span><br><span class="line">    infer_img = fluid.dygraph.to_variable(infer_img)</span><br><span class="line">    result=model(infer_img)</span><br><span class="line">    display(Image.open(<span class="string">'手势.JPG'</span>))</span><br><span class="line">    print(np.argmax(result.numpy()))</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>手势识别</category>
      </categories>
      <tags>
        <tag>百度深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>百度深度学习第一天：可视化</title>
    <url>/archives/68cab7ad.html</url>
    <content><![CDATA[<p><strong>新冠疫情可视化</strong></p>
<p>请根据课上所学内容，爬取3月31日当天丁香园公开的统计数据，根据累计确诊数，使用pyecharts绘制疫情分布图，如下图所示，<strong>提交截图。</strong></p>
<p>Pycharts api可参考：<a href="https://pyecharts.org/#/zh-cn/" target="_blank" rel="noopener external nofollow noreferrer">https://pyecharts.org/#/zh-cn/</a></p>
<img src="https://ai-studio-static-online.cdn.bcebos.com/24a15aae792b49ecb4b11aa30530e97691a092ef2af94f9f97751826096b4cc8" height="200" width="400" />







<p>可视化，是一种利用计算机图形学和图像处理技术，将数据转换成图像在屏幕上显示出来，再进行交互处理的理论、方法和技术。</p>
<a id="more"></a>


<p><strong>本次实践基于丁香园公开的统计数据，实现新冠疫情可视化，包括疫情地图、疫情增长趋势图、疫情分布图等。</strong><br><br /><br><br /></p>
<p><strong>全国疫情地图如下：</strong></p>
<img src="https://ai-studio-static-online.cdn.bcebos.com/3ca5fa8e7019498ab7217aea7a552f0394ff092045174b9284920dbee57b0c1a" height="500" width="500" />

<br />
<br />
<br />
<br />

<p><strong>疫情增长趋势图如下：</strong></p>
<img src="https://ai-studio-static-online.cdn.bcebos.com/28000edb58d34e2e991b6dc2739007ae837b9b031d8842528c9d9506941fbd17" height="500" width="600" />







<h1 id="一、数据准备"><a href="#一、数据准备" class="headerlink" title="一、数据准备"></a>一、数据准备</h1><p>上网的全过程:</p>
<ul>
<li><p>普通用户</p>
<p>打开浏览器 –&gt; 往目标站点发送请求 –&gt; 接收响应数据 –&gt; 渲染到页面上。</p>
</li>
</ul>
<ul>
<li>爬虫程序</li>
</ul>
<p>模拟浏览器 –&gt; 往目标站点发送请求 –&gt; 接收响应数据 –&gt; 提取有用的数据 –&gt; 保存到本地/数据库。</p>
<br />

<p>爬虫的过程：</p>
<p>1.发送请求（requests模块）</p>
<p>2.获取响应数据（服务器返回）</p>
<p>3.解析并提取数据（re正则）</p>
<p>4.保存数据</p>
<p><strong>request模块：</strong></p>
<p>requests是python实现的简单易用的HTTP库，官网地址：<a href="http://cn.python-requests.org/zh_CN/latest/" target="_blank" rel="noopener external nofollow noreferrer">http://cn.python-requests.org/zh_CN/latest/</a></p>
<p><strong>re模块：</strong></p>
<p>re模块是python用于匹配字符串的模块，该模块中提供的很多功能是基于正则表达式实现的，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">today = datetime.date.today().strftime(<span class="string">'%Y%m%d'</span>)   <span class="comment">#20200315</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crawl_dxy_data</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    爬取丁香园实时统计数据，保存到data目录下，以当前日期作为文件名，存JSON文件</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    response = requests.get(<span class="string">'https://ncov.dxy.cn/ncovh5/view/pneumonia'</span>) <span class="comment">#request.get()用于请求目标网站</span></span><br><span class="line">    print(response.status_code)                                          <span class="comment"># 打印状态码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        url_text = response.content.decode()                             <span class="comment">#更推荐使用response.content.deocde()的方式获取响应的html页面</span></span><br><span class="line">        <span class="comment">#print(url_text)</span></span><br><span class="line">        url_content = re.search(<span class="string">r'window.getAreaStat = (.*?)&#125;]&#125;catch'</span>,   <span class="comment">#re.search():扫描字符串以查找正则表达式模式产生匹配项的第一个位置 ，然后返回相应的match对象。</span></span><br><span class="line">                                url_text, re.S)                          <span class="comment">#在字符串a中，包含换行符\n，在这种情况下：如果不使用re.S参数，则只在每一行内进行匹配，如果一行没有，就换下一行重新开始;</span></span><br><span class="line">                                                                         <span class="comment">#而使用re.S参数以后，正则表达式会将这个字符串作为一个整体，在整体中进行匹配。</span></span><br><span class="line">        texts = url_content.group()                                      <span class="comment">#获取匹配正则表达式的整体结果</span></span><br><span class="line">        content = texts.replace(<span class="string">'window.getAreaStat = '</span>, <span class="string">''</span>).replace(<span class="string">'&#125;catch'</span>, <span class="string">''</span>) <span class="comment">#去除多余的字符</span></span><br><span class="line">        json_data = json.loads(content)                                         </span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'data/'</span> + today + <span class="string">'.json'</span>, <span class="string">'w'</span>, encoding=<span class="string">'UTF-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            json.dump(json_data, f, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">'&lt;Response [%s]&gt;'</span> % response.status_code)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crawl_statistics_data</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    获取各个省份历史统计数据，保存到data目录下，存JSON文件</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'data/'</span>+ today + <span class="string">'.json'</span>, <span class="string">'r'</span>, encoding=<span class="string">'UTF-8'</span>) <span class="keyword">as</span> file:</span><br><span class="line">        json_array = json.loads(file.read())</span><br><span class="line"></span><br><span class="line">    statistics_data = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> province <span class="keyword">in</span> json_array:</span><br><span class="line">        response = requests.get(province[<span class="string">'statisticsData'</span>])</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            statistics_data[province[<span class="string">'provinceShortName'</span>]] = json.loads(response.content.decode())[<span class="string">'data'</span>]</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">'&lt;Response [%s]&gt; for url: [%s]'</span> % (response.status_code, province[<span class="string">'statisticsData'</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"data/statistics_data.json"</span>, <span class="string">"w"</span>, encoding=<span class="string">'UTF-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        json.dump(statistics_data, f, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    crawl_dxy_data()</span><br><span class="line">    crawl_statistics_data()</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">200</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">安装第三方库pyecharts ，如果下载时出现断线和速度过慢的问题导致下载失败，可以尝试使用清华镜像</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#!pip install pyecharts</span></span><br><span class="line">!pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pyecharts</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Looking in indexes: https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</span><br><span class="line">Requirement already satisfied: pyecharts in &#x2F;opt&#x2F;conda&#x2F;envs&#x2F;python35-paddle120-env&#x2F;lib&#x2F;python3.7&#x2F;site-packages (1.7.1)</span><br><span class="line">Requirement already satisfied: prettytable in &#x2F;opt&#x2F;conda&#x2F;envs&#x2F;python35-paddle120-env&#x2F;lib&#x2F;python3.7&#x2F;site-packages (from pyecharts) (0.7.2)</span><br><span class="line">Requirement already satisfied: simplejson in &#x2F;opt&#x2F;conda&#x2F;envs&#x2F;python35-paddle120-env&#x2F;lib&#x2F;python3.7&#x2F;site-packages (from pyecharts) (3.17.0)</span><br><span class="line">Requirement already satisfied: jinja2 in &#x2F;opt&#x2F;conda&#x2F;envs&#x2F;python35-paddle120-env&#x2F;lib&#x2F;python3.7&#x2F;site-packages (from pyecharts) (2.10.3)</span><br><span class="line">Requirement already satisfied: MarkupSafe&gt;&#x3D;0.23 in &#x2F;opt&#x2F;conda&#x2F;envs&#x2F;python35-paddle120-env&#x2F;lib&#x2F;python3.7&#x2F;site-packages (from jinja2-&gt;pyecharts) (1.1.1)</span><br></pre></td></tr></table></figure>

<h1 id="二、疫情地图"><a href="#二、疫情地图" class="headerlink" title="二、疫情地图"></a>二、疫情地图</h1><p>Echarts 是一个由百度开源的数据可视化工具，凭借着良好的交互性，精巧的图表设计，得到了众多开发者的认可。而 Python 是一门富有表达力的语言，很适合用于数据处理。当数据分析遇上数据可视化时，<strong>pyecharts</strong> 诞生了。pyecharts api可以参考：<a href="https://pyecharts.org/#/zh-cn/chart_api" target="_blank" rel="noopener external nofollow noreferrer">https://pyecharts.org/#/zh-cn/chart_api</a></p>
<br />
<br/>

<p><strong>使用 options 配置项，在 pyecharts 中，一切皆 Options。</strong></p>
<p>主要分为全局配置组件和系列配置组件。</p>
<p>（1）系列配置项 set_series_opts(),可配置图元样式、文字样式、标签样式、点线样式等；   </p>
<p>（2）全局配置项 set_global_opts()，可配置标题、动画、坐标轴、图例等;                       </p>
<p>先来认识下全局配置组件吧</p>
<img src="https://ai-studio-static-online.cdn.bcebos.com/dc6f8d74e83a49ccb2ce5d0c2d8518fc7e731d1d203a4ec4ace84d6aacf73910" height="600" width="700" />



<h1 id="2-1全国疫情地图"><a href="#2-1全国疫情地图" class="headerlink" title="2.1全国疫情地图"></a>2.1全国疫情地图</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Map</span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读原始数据文件</span></span><br><span class="line">today = datetime.date.today().strftime(<span class="string">'%Y%m%d'</span>)   <span class="comment">#20200315</span></span><br><span class="line">datafile = <span class="string">'data/'</span>+ today + <span class="string">'.json'</span></span><br><span class="line"><span class="keyword">with</span> open(datafile, <span class="string">'r'</span>, encoding=<span class="string">'UTF-8'</span>) <span class="keyword">as</span> file:</span><br><span class="line">    json_array = json.loads(file.read())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分析全国实时确诊数据：'confirmedCount'字段</span></span><br><span class="line">china_data = []</span><br><span class="line"><span class="keyword">for</span> province <span class="keyword">in</span> json_array:</span><br><span class="line">    china_data.append((province[<span class="string">'provinceShortName'</span>], province[<span class="string">'confirmedCount'</span>]))</span><br><span class="line">china_data = sorted(china_data, key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="literal">True</span>)                 <span class="comment">#reverse=True,表示降序，反之升序</span></span><br><span class="line"></span><br><span class="line">print(china_data)</span><br><span class="line"><span class="comment"># 全国疫情地图</span></span><br><span class="line"><span class="comment"># 自定义的每一段的范围，以及每一段的特别的样式。</span></span><br><span class="line">pieces = [</span><br><span class="line">    &#123;<span class="string">'min'</span>: <span class="number">10000</span>, <span class="string">'color'</span>: <span class="string">'#540d0d'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'max'</span>: <span class="number">9999</span>, <span class="string">'min'</span>: <span class="number">1000</span>, <span class="string">'color'</span>: <span class="string">'#9c1414'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'max'</span>: <span class="number">999</span>, <span class="string">'min'</span>: <span class="number">500</span>, <span class="string">'color'</span>: <span class="string">'#d92727'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'max'</span>: <span class="number">499</span>, <span class="string">'min'</span>: <span class="number">100</span>, <span class="string">'color'</span>: <span class="string">'#ed3232'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'max'</span>: <span class="number">99</span>, <span class="string">'min'</span>: <span class="number">10</span>, <span class="string">'color'</span>: <span class="string">'#f27777'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'max'</span>: <span class="number">9</span>, <span class="string">'min'</span>: <span class="number">1</span>, <span class="string">'color'</span>: <span class="string">'#f7adad'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'max'</span>: <span class="number">0</span>, <span class="string">'color'</span>: <span class="string">'#f7e4e4'</span>&#125;,</span><br><span class="line">]</span><br><span class="line">labels = [data[<span class="number">0</span>] <span class="keyword">for</span> data <span class="keyword">in</span> china_data]</span><br><span class="line">counts = [data[<span class="number">1</span>] <span class="keyword">for</span> data <span class="keyword">in</span> china_data]</span><br><span class="line"></span><br><span class="line">m = Map()</span><br><span class="line">m.add(<span class="string">"累计确诊"</span>, [list(z) <span class="keyword">for</span> z <span class="keyword">in</span> zip(labels, counts)], <span class="string">'china'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#系列配置项,可配置图元样式、文字样式、标签样式、点线样式等</span></span><br><span class="line">m.set_series_opts(label_opts=opts.LabelOpts(font_size=<span class="number">12</span>),</span><br><span class="line">                  is_show=<span class="literal">False</span>)</span><br><span class="line"><span class="comment">#全局配置项,可配置标题、动画、坐标轴、图例等</span></span><br><span class="line">m.set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">'全国实时确诊数据'</span>,</span><br><span class="line">                                            subtitle=<span class="string">'数据来源：丁香园'</span>),</span><br><span class="line">                  legend_opts=opts.LegendOpts(is_show=<span class="literal">False</span>),</span><br><span class="line">                  visualmap_opts=opts.VisualMapOpts(pieces=pieces,</span><br><span class="line">                                                    is_piecewise=<span class="literal">True</span>,   <span class="comment">#是否为分段型</span></span><br><span class="line">                                                    is_show=<span class="literal">True</span>))       <span class="comment">#是否显示视觉映射配置</span></span><br><span class="line"><span class="comment">#render（）会生成本地 HTML 文件，默认会在当前目录生成 render.html 文件，也可以传入路径参数，如 m.render("mycharts.html")</span></span><br><span class="line">m.render(path=<span class="string">'/home/aistudio/data/全国实时确诊数据.html'</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[(&#39;湖北&#39;, 67801), (&#39;广东&#39;, 1494), (&#39;河南&#39;, 1276), (&#39;浙江&#39;, 1257), (&#39;湖南&#39;, 1018), (&#39;安徽&#39;, 990), (&#39;江西&#39;, 937), (&#39;山东&#39;, 774), (&#39;香港&#39;, 714), (&#39;江苏&#39;, 646), (&#39;北京&#39;, 580), (&#39;重庆&#39;, 579), (&#39;四川&#39;, 552), (&#39;上海&#39;, 516), (&#39;黑龙江&#39;, 484), (&#39;福建&#39;, 343), (&#39;河北&#39;, 323), (&#39;台湾&#39;, 322), (&#39;陕西&#39;, 255), (&#39;广西&#39;, 254), (&#39;云南&#39;, 182), (&#39;天津&#39;, 174), (&#39;海南&#39;, 168), (&#39;贵州&#39;, 147), (&#39;辽宁&#39;, 140), (&#39;甘肃&#39;, 138), (&#39;山西&#39;, 137), (&#39;内蒙古&#39;, 107), (&#39;吉林&#39;, 98), (&#39;新疆&#39;, 76), (&#39;宁夏&#39;, 75), (&#39;澳门&#39;, 41), (&#39;青海&#39;, 18), (&#39;西藏&#39;, 1)]</span><br></pre></td></tr></table></figure>





<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;&#x2F;home&#x2F;aistudio&#x2F;data&#x2F;全国实时确诊数据.html&#39;</span><br></pre></td></tr></table></figure>



<h1 id="2-2湖北省疫情地图"><a href="#2-2湖北省疫情地图" class="headerlink" title="2.2湖北省疫情地图"></a>2.2湖北省疫情地图</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Map</span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读原始数据文件</span></span><br><span class="line">today = datetime.date.today().strftime(<span class="string">'%Y%m%d'</span>)   <span class="comment">#20200315</span></span><br><span class="line">datafile = <span class="string">'data/'</span>+ today + <span class="string">'.json'</span></span><br><span class="line"><span class="keyword">with</span> open(datafile, <span class="string">'r'</span>, encoding=<span class="string">'UTF-8'</span>) <span class="keyword">as</span> file:</span><br><span class="line">    json_array = json.loads(file.read())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分析湖北省实时确诊数据</span></span><br><span class="line"><span class="comment"># 读入规范化的城市名称，用于规范化丁香园数据中的城市简称</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'/home/aistudio/data/data24815/pycharts_city.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'UTF-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    defined_cities = [line.strip() <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines()]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">format_city_name</span><span class="params">(name, defined_cities)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> defined_city <span class="keyword">in</span> defined_cities:</span><br><span class="line">        <span class="keyword">if</span> len((set(defined_city) &amp; set(name))) == len(name):</span><br><span class="line">            name = defined_city</span><br><span class="line">            <span class="keyword">if</span> name.endswith(<span class="string">'市'</span>) <span class="keyword">or</span> name.endswith(<span class="string">'区'</span>) <span class="keyword">or</span> name.endswith(<span class="string">'县'</span>) <span class="keyword">or</span> name.endswith(<span class="string">'自治州'</span>):</span><br><span class="line">                <span class="keyword">return</span> name</span><br><span class="line">            <span class="keyword">return</span> name + <span class="string">'市'</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">province_name = <span class="string">'湖北'</span></span><br><span class="line"><span class="keyword">for</span> province <span class="keyword">in</span> json_array:</span><br><span class="line">    <span class="keyword">if</span> province[<span class="string">'provinceName'</span>] == province_name <span class="keyword">or</span> province[<span class="string">'provinceShortName'</span>] == province_name:</span><br><span class="line">        json_array_province = province[<span class="string">'cities'</span>]</span><br><span class="line">        hubei_data = [(format_city_name(city[<span class="string">'cityName'</span>], defined_cities), city[<span class="string">'confirmedCount'</span>]) <span class="keyword">for</span> city <span class="keyword">in</span></span><br><span class="line">                      json_array_province]</span><br><span class="line">        hubei_data = sorted(hubei_data, key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        print(hubei_data)</span><br><span class="line"></span><br><span class="line">labels = [data[<span class="number">0</span>] <span class="keyword">for</span> data <span class="keyword">in</span> hubei_data]</span><br><span class="line">counts = [data[<span class="number">1</span>] <span class="keyword">for</span> data <span class="keyword">in</span> hubei_data]</span><br><span class="line">pieces = [</span><br><span class="line">    &#123;<span class="string">'min'</span>: <span class="number">10000</span>, <span class="string">'color'</span>: <span class="string">'#540d0d'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'max'</span>: <span class="number">9999</span>, <span class="string">'min'</span>: <span class="number">1000</span>, <span class="string">'color'</span>: <span class="string">'#9c1414'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'max'</span>: <span class="number">999</span>, <span class="string">'min'</span>: <span class="number">500</span>, <span class="string">'color'</span>: <span class="string">'#d92727'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'max'</span>: <span class="number">499</span>, <span class="string">'min'</span>: <span class="number">100</span>, <span class="string">'color'</span>: <span class="string">'#ed3232'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'max'</span>: <span class="number">99</span>, <span class="string">'min'</span>: <span class="number">10</span>, <span class="string">'color'</span>: <span class="string">'#f27777'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'max'</span>: <span class="number">9</span>, <span class="string">'min'</span>: <span class="number">1</span>, <span class="string">'color'</span>: <span class="string">'#f7adad'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'max'</span>: <span class="number">0</span>, <span class="string">'color'</span>: <span class="string">'#f7e4e4'</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">m = Map()</span><br><span class="line">m.add(<span class="string">"累计确诊"</span>, [list(z) <span class="keyword">for</span> z <span class="keyword">in</span> zip(labels, counts)], <span class="string">'湖北'</span>)</span><br><span class="line">m.set_series_opts(label_opts=opts.LabelOpts(font_size=<span class="number">12</span>),</span><br><span class="line">                  is_show=<span class="literal">False</span>)</span><br><span class="line">m.set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">'湖北省实时确诊数据'</span>,</span><br><span class="line">                                            subtitle=<span class="string">'数据来源：丁香园'</span>),</span><br><span class="line">                  legend_opts=opts.LegendOpts(is_show=<span class="literal">False</span>),</span><br><span class="line">                  visualmap_opts=opts.VisualMapOpts(pieces=pieces,</span><br><span class="line">                                                    is_piecewise=<span class="literal">True</span>,</span><br><span class="line">                                                    is_show=<span class="literal">True</span>))</span><br><span class="line">m.render(path=<span class="string">'/home/aistudio/data/湖北省实时确诊数据.html'</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[(&#39;武汉市&#39;, 50006), (&#39;孝感市&#39;, 3518), (&#39;黄冈市&#39;, 2907), (&#39;荆州市&#39;, 1580), (&#39;鄂州市&#39;, 1394), (&#39;随州市&#39;, 1307), (&#39;襄阳市&#39;, 1175), (&#39;黄石市&#39;, 1015), (&#39;宜昌市&#39;, 931), (&#39;荆门市&#39;, 928), (&#39;咸宁市&#39;, 836), (&#39;十堰市&#39;, 672), (&#39;仙桃市&#39;, 575), (&#39;天门市&#39;, 496), (&#39;恩施土家族苗族自治州&#39;, 252), (&#39;潜江市&#39;, 198), (&#39;神农架林区&#39;, 11)]</span><br></pre></td></tr></table></figure>





<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;&#x2F;home&#x2F;aistudio&#x2F;data&#x2F;湖北省实时确诊数据.html&#39;</span><br></pre></td></tr></table></figure>



<h1 id="三、疫情增长趋势图"><a href="#三、疫情增长趋势图" class="headerlink" title="三、疫情增长趋势图"></a>三、疫情增长趋势图</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Line</span><br><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读原始数据文件</span></span><br><span class="line">datafile = <span class="string">'data/statistics_data.json'</span></span><br><span class="line"><span class="keyword">with</span> open(datafile, <span class="string">'r'</span>, encoding=<span class="string">'UTF-8'</span>) <span class="keyword">as</span> file:</span><br><span class="line">    json_dict = json.loads(file.read())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分析各省份2月1日至今的新增确诊数据：'confirmedIncr'</span></span><br><span class="line">statistics__data = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> province <span class="keyword">in</span> json_dict:</span><br><span class="line">    statistics__data[province] = []</span><br><span class="line">    <span class="keyword">for</span> da <span class="keyword">in</span> json_dict[province]:</span><br><span class="line">        <span class="keyword">if</span> da[<span class="string">'dateId'</span>] &gt;= <span class="number">20200201</span>:</span><br><span class="line">            statistics__data[province].append(da[<span class="string">'confirmedIncr'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取日期列表</span></span><br><span class="line">dateId = [str(da[<span class="string">'dateId'</span>])[<span class="number">4</span>:<span class="number">6</span>] + <span class="string">'-'</span> + str(da[<span class="string">'dateId'</span>])[<span class="number">6</span>:<span class="number">8</span>] <span class="keyword">for</span> da <span class="keyword">in</span> json_dict[<span class="string">'湖北'</span>] <span class="keyword">if</span></span><br><span class="line">          da[<span class="string">'dateId'</span>] &gt;= <span class="number">20200201</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全国新增趋势</span></span><br><span class="line">all_statis = np.array([<span class="number">0</span>] * len(dateId))</span><br><span class="line"><span class="keyword">for</span> province <span class="keyword">in</span> statistics__data:</span><br><span class="line">    all_statis = all_statis + np.array(statistics__data[province])</span><br><span class="line"></span><br><span class="line">all_statis = all_statis.tolist()</span><br><span class="line"><span class="comment"># 湖北新增趋势</span></span><br><span class="line">hubei_statis = statistics__data[<span class="string">'湖北'</span>]</span><br><span class="line"><span class="comment"># 湖北以外的新增趋势</span></span><br><span class="line">other_statis = [all_statis[i] - hubei_statis[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(dateId))]</span><br><span class="line"></span><br><span class="line">line = Line()</span><br><span class="line">line.add_xaxis(dateId)</span><br><span class="line">line.add_yaxis(<span class="string">"全国新增确诊病例"</span>,   <span class="comment">#图例</span></span><br><span class="line">                all_statis,       <span class="comment">#数据</span></span><br><span class="line">                is_smooth=<span class="literal">True</span>,   <span class="comment">#是否平滑曲线</span></span><br><span class="line">               linestyle_opts=opts.LineStyleOpts(width=<span class="number">4</span>, color=<span class="string">'#B44038'</span>),<span class="comment">#线样式配置项</span></span><br><span class="line">               itemstyle_opts=opts.ItemStyleOpts(color=<span class="string">'#B44038'</span>,          <span class="comment">#图元样式配置项</span></span><br><span class="line">                                                 border_color=<span class="string">"#B44038"</span>,   <span class="comment">#颜色</span></span><br><span class="line">                                                 border_width=<span class="number">10</span>))         <span class="comment">#图元的大小</span></span><br><span class="line">line.add_yaxis(<span class="string">"湖北新增确诊病例"</span>, hubei_statis, is_smooth=<span class="literal">True</span>,</span><br><span class="line">               linestyle_opts=opts.LineStyleOpts(width=<span class="number">2</span>, color=<span class="string">'#4E87ED'</span>),</span><br><span class="line">               label_opts=opts.LabelOpts(position=<span class="string">'bottom'</span>),              <span class="comment">#标签在折线的底部</span></span><br><span class="line">               itemstyle_opts=opts.ItemStyleOpts(color=<span class="string">'#4E87ED'</span>,</span><br><span class="line">                                                 border_color=<span class="string">"#4E87ED"</span>,</span><br><span class="line">                                                 border_width=<span class="number">3</span>))</span><br><span class="line">line.add_yaxis(<span class="string">"其他省份新增病例"</span>, other_statis, is_smooth=<span class="literal">True</span>,</span><br><span class="line">               linestyle_opts=opts.LineStyleOpts(width=<span class="number">2</span>, color=<span class="string">'#F1A846'</span>),</span><br><span class="line">               label_opts=opts.LabelOpts(position=<span class="string">'bottom'</span>),              <span class="comment">#标签在折线的底部</span></span><br><span class="line">               itemstyle_opts=opts.ItemStyleOpts(color=<span class="string">'#F1A846'</span>,</span><br><span class="line">                                                 border_color=<span class="string">"#F1A846"</span>,</span><br><span class="line">                                                 border_width=<span class="number">3</span>))</span><br><span class="line">line.set_global_opts(title_opts=opts.TitleOpts(title=<span class="string">"新增确诊病例"</span>, subtitle=<span class="string">'数据来源：丁香园'</span>),</span><br><span class="line">                     yaxis_opts=opts.AxisOpts(max_=<span class="number">16000</span>, min_=<span class="number">1</span>, type_=<span class="string">"log"</span>,    <span class="comment">#坐标轴配置项</span></span><br><span class="line">                                              splitline_opts=opts.SplitLineOpts(is_show=<span class="literal">True</span>),<span class="comment">#分割线配置项</span></span><br><span class="line">                                              axisline_opts=opts.AxisLineOpts(is_show=<span class="literal">True</span>)))<span class="comment">#坐标轴刻度线配置项</span></span><br><span class="line">line.render(path=<span class="string">'/home/aistudio/data/新增确诊趋势图.html'</span>)</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;&#x2F;home&#x2F;aistudio&#x2F;data&#x2F;新增确诊趋势图.html&#39;</span><br></pre></td></tr></table></figure>



<h1 id="请在以下cell中完成作业"><a href="#请在以下cell中完成作业" class="headerlink" title="请在以下cell中完成作业"></a>请在以下cell中完成作业</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Pie</span><br><span class="line"><span class="keyword">from</span> pyecharts.faker <span class="keyword">import</span> Faker</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Map</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读原始数据文件</span></span><br><span class="line">today = datetime.date.today().strftime(<span class="string">'%Y%m%d'</span>)   <span class="comment">#20200315</span></span><br><span class="line">datafile = <span class="string">'data/'</span>+ today + <span class="string">'.json'</span></span><br><span class="line"><span class="keyword">with</span> open(datafile, <span class="string">'r'</span>, encoding=<span class="string">'UTF-8'</span>) <span class="keyword">as</span> file:</span><br><span class="line">    json_array = json.loads(file.read())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分析全国实时确诊数据：'confirmedCount'字段</span></span><br><span class="line">china_data = []</span><br><span class="line"><span class="keyword">for</span> province <span class="keyword">in</span> json_array:</span><br><span class="line">    china_data.append((province[<span class="string">'provinceShortName'</span>], province[<span class="string">'confirmedCount'</span>]))</span><br><span class="line">china_data = sorted(china_data, key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="literal">True</span>)                 <span class="comment">#reverse=True,表示降序，反之升序</span></span><br><span class="line">labels = [data[<span class="number">0</span>] <span class="keyword">for</span> data <span class="keyword">in</span> china_data]</span><br><span class="line">counts = [data[<span class="number">1</span>] <span class="keyword">for</span> data <span class="keyword">in</span> china_data]</span><br><span class="line"></span><br><span class="line">c = (</span><br><span class="line">    Pie(init_opts=opts.InitOpts(width=<span class="string">"1100px"</span>, height=<span class="string">"950px"</span>))</span><br><span class="line">    .add(</span><br><span class="line">        <span class="string">""</span>,</span><br><span class="line">        [list(z) <span class="keyword">for</span> z <span class="keyword">in</span> zip(labels, counts)],</span><br><span class="line">        center=[<span class="string">"45%"</span>, <span class="string">"50%"</span>],</span><br><span class="line">    )</span><br><span class="line">    .set_global_opts(</span><br><span class="line">        title_opts=opts.TitleOpts(title=<span class="string">"全国疫情情况"</span>),</span><br><span class="line">        legend_opts=opts.LegendOpts(pos_left=<span class="string">"right"</span>, orient=<span class="string">"vertical"</span>),</span><br><span class="line">    )</span><br><span class="line">    .set_series_opts(label_opts=opts.LabelOpts(formatter=<span class="string">"&#123;b&#125;: &#123;c&#125;"</span>))</span><br><span class="line">    .render(<span class="string">"/home/aistudio/data/疫情饼图.html"</span>)</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>



<h1 id="请将作业截图进行上传"><a href="#请将作业截图进行上传" class="headerlink" title="请将作业截图进行上传"></a>请将作业截图进行上传</h1><p><img src="https://ai-studio-static-online.cdn.bcebos.com/50c6c84213f54b63bf55a1c3408ae30e34465092d8024e859bc37c40a01f83e2" alt=""><br><img src="https://ai-studio-static-online.cdn.bcebos.com/76efa5075f9e40a48c703c28a72785c1e13602ffaec343049387a5b1253f10d4" alt=""><br><img src="https://ai-studio-static-online.cdn.bcebos.com/d3bdb77498354c4e819d9cd859e00c3b765b621551f941feb79f68bf8d1bdd6d" alt=""></p>
]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>百度深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>友邻优课外刊</title>
    <url>/archives/acc9d925.html</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">输入密码，查看文章</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="dac4853a2c804f0d45bb97f42ec147dd7c2140b614ba811fb5fa9c907ac330bf"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>友邻优课外刊</category>
      </categories>
      <tags>
        <tag>英语</tag>
        <tag>外刊</tag>
        <tag>单词</tag>
      </tags>
  </entry>
</search>
